compilers=&cgcc86:&cclang:&armcclang32:&armcclang64:&cgccarm
defaultCompiler=cg950
demangler=/opt/compiler-explorer/gcc-9.5.0/bin/c++filt
objdumper=/opt/compiler-explorer/gcc-9.5.0/bin/objdump
needsMulti=false

buildenvsetup=ceconan
buildenvsetup.host=https://conan.compiler-explorer.com

# externalparser=CEAsmParser
# externalparser.exe=/usr/local/bin/asm-parser

llvmDisassembler=/opt/compiler-explorer/clang-10.0.1/bin/llvm-dis

###############################
# GCC for x86
group.cgcc86.compilers=cg95

group.cgcc86.groupName=GCC x86-64
group.cgcc86.instructionSet=amd64
group.cgcc86.isSemVer=true
group.cgcc86.baseName=x86-64 gcc
group.cgcc86.supportsPVS-Studio=true
group.cgcc86.supportsSonar=true
group.cgcc86.licenseLink=https://gcc.gnu.org/onlinedocs/gcc/Copying.html
group.cgcc86.licenseName=GNU General Public License
group.cgcc86.licensePreamble=Copyright (c) 2007 Free Software Foundation, Inc. <a href="https://fsf.org/" target="_blank">https://fsf.org/</a>
group.cgcc86.compilerCategories=gcc

compiler.cg95.exe=/opt/compiler-explorer/gcc-9.5.0/bin/gcc
compiler.cg95.semver=9.5

# Clang for x86
group.cclang.compilers= cclang1001
group.cclang.intelAsm=-mllvm --x86-asm-syntax=intel
group.cclang.options=--gcc-toolchain=/opt/compiler-explorer/gcc-9.5.0
group.cclang.groupName=Clang x86-64
group.cclang.instructionSet=amd64
group.cclang.isSemVer=true
group.cclang.baseName=x86-64 clang
group.cclang.compilerType=clang
group.cclang.supportsPVS-Studio=true
group.cclang.supportsSonar=true
group.cclang.licenseName=LLVM Apache 2
group.cclang.licenseLink=https://github.com/llvm/llvm-project/blob/main/LICENSE.TXT
group.cclang.licensePreamble=The LLVM Project is under the Apache License v2.0 with LLVM Exceptions
group.cclang.compilerCategories=clang

compiler.cclang1001.exe=/opt/compiler-explorer/clang-10.0.1/bin/clang
compiler.cclang1001.semver=10.0.1
compiler.cclang1001.options=--gcc-toolchain=/opt/compiler-explorer/gcc-9.5.0

# Clang for Arm
# Provides 32- and 64-bit menu items for clang-9 and trunk
group.armcclang32.groupName=Arm 32-bit clang
group.armcclang32.compilers= armv7-cclang1001
group.armcclang32.isSemVer=true
group.armcclang32.compilerType=clang
group.armcclang32.supportsExecute=false
group.armcclang32.instructionSet=arm32
group.armcclang32.licenseName=LLVM Apache 2
group.armcclang32.licenseLink=https://github.com/llvm/llvm-project/blob/main/LICENSE.TXT
group.armcclang32.licensePreamble=The LLVM Project is under the Apache License v2.0 with LLVM Exceptions
group.armcclang32.compilerCategories=clang

group.armcclang64.groupName=Arm 64-bit clang
group.armcclang64.compilers=armv8-cclang1001
group.armcclang64.isSemVer=true
group.armcclang64.compilerType=clang
group.armcclang64.supportsExecute=false
group.armcclang64.instructionSet=aarch64
group.armcclang64.licenseName=LLVM Apache 2
group.armcclang64.licenseLink=https://github.com/llvm/llvm-project/blob/main/LICENSE.TXT
group.armcclang64.licensePreamble=The LLVM Project is under the Apache License v2.0 with LLVM Exceptions
group.armcclang64.compilerCategories=clang

compiler.armv7-cclang1001.name=armv7-a clang 10.0.1
compiler.armv7-cclang1001.exe=/opt/compiler-explorer/clang-10.0.1/bin/clang
compiler.armv7-cclang1001.semver=10.0.1
# Arm v7-a with Neon and VFPv3
compiler.armv7-cclang1001.options=-target arm-linux-gnueabihf --gcc-toolchain=/opt/compiler-explorer/arm/gcc-9.5.0/arm-unknown-linux-gnueabihf --sysroot=/opt/compiler-explorer/arm/gcc-9.5.0/arm-unknown-linux-gnueabihf/arm-unknown-linux-gnueabihf/sysroot

compiler.armv8-cclang1001.name=armv8-a clang 10.0.1
compiler.armv8-cclang1001.exe=/opt/compiler-explorer/clang-10.0.1/bin/clang
compiler.armv8-cclang1001.semver=10.0.1
# Arm v8-a
compiler.armv8-cclang1001.options=-target aarch64-linux-gnu --gcc-toolchain=/opt/compiler-explorer/arm64/gcc-9.5.0/aarch64-unknown-linux-gnu --sysroot=/opt/compiler-explorer/arm64/gcc-9.5.0/aarch64-unknown-linux-gnu/aarch64-unknown-linux-gnu/sysroot

###############################
# GCC for ARM
group.cgccarm.compilers=&cgcc32arm:&cgcc64arm
group.cgccarm.supportsBinaryObject=true
group.cgccarm.supportsExecute=false
# Some of the compilers don't like -isystem (as they assume the code must be C).
# See https://github.com/compiler-explorer/compiler-explorer/issues/989 for discussion/
group.cgccarm.includeFlag=-I

# 32 bit
group.cgcc32arm.groupName=Arm 32-bit GCC
group.cgcc32arm.baseName=ARM GCC
group.cgcc32arm.compilers=carmg950
group.cgcc32arm.isSemVer=true
group.cgcc32arm.objdumper=/opt/compiler-explorer/arm/gcc-9.5.0/arm-unknown-linux-gnueabihf/bin/arm-unknown-linux-gnueabihf-objdump
group.cgcc32arm.instructionSet=arm32

compiler.carmg950.exe=/opt/compiler-explorer/arm/gcc-9.5.0/arm-unknown-linux-gnueabihf/bin/arm-unknown-linux-gnueabihf-gcc
compiler.carmg950.semver=9.5.0
compiler.carmg950.objdumper=/opt/compiler-explorer/arm/gcc-9.5.0/arm-unknown-linux-gnueabihf/bin/arm-unknown-linux-gnueabihf-objdump

# 64 bit
group.cgcc64arm.groupName=ARM64 gcc
group.cgcc64arm.baseName=ARM64 GCC
group.cgcc64arm.compilers= carm64g950

group.cgcc64arm.isSemVer=true
group.cgcc64arm.objdumper=/opt/compiler-explorer/arm64/gcc-9.5.0/aarch64-unknown-linux-gnu/aarch64-unknown-linux-gnu/bin/aarch64-unknown-linux-gnu-objdump
group.cgcc64arm.instructionSet=aarch64

compiler.carm64g950.exe=/opt/compiler-explorer/arm64/gcc-9.5.0/aarch64-unknown-linux-gnu/bin/aarch64-unknown-linux-gnu-gcc
compiler.carm64g950.semver=9.5.0

#################################
#################################
# Installed tools
tools=clangformat1001:clangquery1001:clangtidy1001:ldd:llvm-mca1001:readelf:nm:strings:llvmdwarfdump1001

tools.clangformat1001.exe=/opt/compiler-explorer/clang-10.0.1/bin/clang-format
tools.clangformat1001.name=clang-format
tools.clangformat1001.type=independent
tools.clangformat1001.class=clang-format-tool

tools.clangquery1001.exe=/opt/compiler-explorer/clang-10.0.1/bin/clang-query
tools.clangquery1001.name=clang-query (1001)
tools.clangquery1001.type=independent
tools.clangquery1001.class=clang-query-tool
tools.clangquery1001.stdinHint=Query commands

tools.clangtidy1001.exe=/opt/compiler-explorer/clang-10.0.1/bin/clang-tidy
tools.clangtidy1001.name=clang-tidy (10.0.1)
tools.clangtidy1001.type=independent
tools.clangtidy1001.class=clang-tidy-tool
tools.clangtidy1001.options=--gcc-toolchain=/opt/compiler-explorer/gcc-9.5.0
tools.clangtidy1001.stdinHint=disabled

tools.ldd.name=ldd
tools.ldd.exe=/usr/bin/ldd
tools.ldd.type=postcompilation
tools.ldd.class=readelf-tool
tools.ldd.exclude=
tools.ldd.stdinHint=disabled

tools.llvm-mca1001.name=llvm-mca (10.0.1)
tools.llvm-mca1001.exe=/opt/compiler-explorer/clang-10.0.1/bin/llvm-mca
tools.llvm-mca1001.type=postcompilation
tools.llvm-mca1001.class=llvm-mca-tool
tools.llvm-mca1001.exclude=
tools.llvm-mca1001.stdinHint=disabled

tools.readelf.name=readelf
tools.readelf.exe=/opt/compiler-explorer/gcc-9.5.0/bin/readelf
tools.readelf.type=postcompilation
tools.readelf.class=readelf-tool
tools.readelf.exclude=
tools.readelf.stdinHint=disabled

tools.nm.name=nm (9.5.0)
tools.nm.exe=/opt/compiler-explorer/gcc-9.5.0/bin/nm
tools.nm.type=postcompilation
tools.nm.class=nm-tool
tools.nm.exclude=
tools.nm.stdinHint=disabled

tools.strings.exe=/opt/compiler-explorer/gcc-9.5.0/bin/strings
tools.strings.name=strings
tools.strings.type=postcompilation
tools.strings.class=strings-tool
tools.strings.exclude=
tools.strings.stdinHint=disabled

tools.llvmdwarfdump1001.exe=/opt/compiler-explorer/clang-10.0.1/bin/llvm-dwarfdump
tools.llvmdwarfdump1001.name=llvm-dwarfdump (10.0.1)
tools.llvmdwarfdump1001.type=postcompilation
tools.llvmdwarfdump1001.class=llvm-dwarfdump-tool
tools.llvmdwarfdump1001.stdinHint=disabled
# MSVC does not produce DWARF debug information.
tools.llvmdwarfdump1001.exclude=
