compilers=&gcc86:&clang:&cross:&armclang32:&armclang64
# Disabled: nvcxx_x86_cxx
# The disabled groups are actually used in the c++.gpu.properties. One day these might exist on both servers, so I want
# to keep them in the same place.
defaultCompiler=g95
demangler=/opt/compiler-explorer/gcc-11.3.0/bin/c++filt
objdumper=/opt/compiler-explorer/gcc-11.3.0/bin/objdump
needsMulti=false

buildenvsetup=ceconan
buildenvsetup.host=https://conan.compiler-explorer.com

externalparser=CEAsmParser
externalparser.exe=/usr/bin/asm-parser

llvmDisassembler=/opt/compiler-explorer/clang-10.0.1/bin/llvm-dis

###############################
# GCC for x86
group.gcc86.compilers= g95:g1130:gdefault
group.gcc86.groupName=GCC x86-64
group.gcc86.instructionSet=amd64
group.gcc86.baseName=x86-64 gcc
group.gcc86.isSemVer=true
group.gcc86.unwiseOptions=-march=native
group.gcc86.supportsPVS-Studio=true
group.gcc86.supportsSonar=true
group.gcc86.licenseLink=https://gcc.gnu.org/onlinedocs/gcc/Copying.html
group.gcc86.licenseName=GNU General Public License
group.gcc86.licensePreamble=Copyright (c) 2007 Free Software Foundation, Inc. <a href="https://fsf.org/" target="_blank">https://fsf.org/</a>
group.gcc86.supportsBinaryObject=true
group.gcc86.compilerCategories=gcc
group.gcc86.options=-Wall -Werror -Wextra

compiler.g95.exe=/opt/compiler-explorer/gcc-9.5.0/bin/g++
compiler.g95.semver=9.5.0

compiler.g1130.exe=/opt/compiler-explorer/gcc-11.3.0/bin/g++
compiler.g1130.semver=11.3.0

compiler.gdefault.exe=/usr/bin/g++
compiler.gdefault.semver=12.2.0

################################
# Clang for x86
group.clang.compilers= clang1001:clang1101:clangdefault
group.clang.intelAsm=-mllvm --x86-asm-syntax=intel
group.clang.options=--gcc-toolchain=/opt/compiler-explorer/gcc-9.5.0
group.clang.groupName=Clang x86-64
group.clang.instructionSet=amd64
group.clang.baseName=x86-64 clang
group.clang.isSemVer=true
group.clang.compilerType=clang
group.clang.unwiseOptions=-march=native
group.clang.supportsPVS-Studio=true
group.clang.supportsSonar=true
group.clang.licenseName=LLVM Apache 2
group.clang.licenseLink=https://github.com/llvm/llvm-project/blob/main/LICENSE.TXT
group.clang.licensePreamble=The LLVM Project is under the Apache License v2.0 with LLVM Exceptions
group.clang.supportsBinaryObject=true
group.clang.compilerCategories=clang

compiler.clang1001.exe=/opt/compiler-explorer/clang-10.0.1/bin/clang++
compiler.clang1001.semver=10.0.1
compiler.clang1001.options=--gcc-toolchain=/opt/compiler-explorer/gcc-9.5.0

compiler.clang1101.exe=/opt/compiler-explorer/clang-11.0.1/bin/clang++
compiler.clang1101.semver=11.0.1
compiler.clang1101.options=--gcc-toolchain=/opt/compiler-explorer/gcc-9.5.0

compiler.clangdefault.exe=/usr/bin/clang++
compiler.clangdefault.semver=14.0.6

################################
# Clang for Arm
# Provides 32- menu items for clang-9, clang-10 and trunk
group.armclang32.groupName=Arm 32-bit clang
group.armclang32.compilers=armv7-clang1001
group.armclang32.isSemVer=true
group.armclang32.compilerType=clang
group.armclang32.supportsExecute=false
group.armclang32.instructionSet=arm32
group.armclang32.baseName=armv7-a clang
group.armclang32.objdumper=/opt/compiler-explorer/arm/gcc-9.5.0/arm-unknown-linux-gnueabihf/bin/arm-unknown-linux-gnueabihf-objdump
group.armclang32.licenseName=LLVM Apache 2
group.armclang32.licenseLink=https://github.com/llvm/llvm-project/blob/main/LICENSE.TXT
group.armclang32.licensePreamble=The LLVM Project is under the Apache License v2.0 with LLVM Exceptions
group.armclang32.compilerCategories=clang

compiler.armv7-clang1001.exe=/opt/compiler-explorer/clang-10.0.1/bin/clang++
compiler.armv7-clang1001.semver=10.0.1
compiler.armv7-clang1001.options=-target arm-linux-gnueabihf --gcc-toolchain=/opt/compiler-explorer/arm/gcc-9.5.0/arm-unknown-linux-gnueabihf --sysroot=/opt/compiler-explorer/arm/gcc-9.5.0/arm-unknown-linux-gnueabihf/arm-unknown-linux-gnueabihf/sysroot

################################
# Clang for Arm
# Provides 64- menu items for clang-9, clang-10 and trunk
group.armclang64.groupName=Arm 64-bit clang
group.armclang64.compilers= armv8-clang1001
group.armclang64.isSemVer=true
group.armclang64.baseName=armv8-a clang
group.armclang64.compilerType=clang
group.armclang64.supportsExecute=false
group.armclang64.supportsSonar=true
group.armclang64.instructionSet=aarch64
group.armclang64.licenseName=LLVM Apache 2
group.armclang64.licenseLink=https://github.com/llvm/llvm-project/blob/main/LICENSE.TXT
group.armclang64.licensePreamble=The LLVM Project is under the Apache License v2.0 with LLVM Exceptions
group.armclang64.compilerCategories=clang

compiler.armv8-clang1001.exe=/opt/compiler-explorer/clang-10.0.1/bin/clang++
compiler.armv8-clang1001.semver=10.0.1
compiler.armv8-clang1001.options=-target aarch64-linux-gnu --gcc-toolchain=/opt/compiler-explorer/arm64/gcc-9.5.0/aarch64-unknown-linux-gnu --sysroot=/opt/compiler-explorer/arm64/gcc-9.5.0/aarch64-unknown-linux-gnu/aarch64-unknown-linux-gnu/sysroot

###############################
# Cross GCC
group.cross.compilers= &gccarm

group.cross.supportsBinaryObject=true
group.cross.supportsBinary=true
group.cross.groupName=Cross GCC
group.cross.supportsExecute=false

# This is probably not correct as only GCC here is GPL. Not clangs* or others.
group.cross.licenseLink=https://gcc.gnu.org/onlinedocs/gcc/Copying.html
group.cross.licenseName=GNU General Public License
group.cross.licensePreamble=Copyright (c) 2007 Free Software Foundation, Inc. <a href="https://fsf.org/" target="_blank">https://fsf.org/</a>
group.cross.compilerCategories=gcc

###############################
# GCC for ARM
group.gccarm.compilers=&gcc32arm:&gcc64arm:&gcc64marm
# Some of the compilers don't like -isystem (as they assume the code must be C).
# See https://github.com/compiler-explorer/compiler-explorer/issues/989 for discussion
group.gccarm.includeFlag=-I

# 32 bit
group.gcc32arm.groupName=Arm 32-bit GCC
group.gcc32arm.baseName=ARM GCC
group.gcc32arm.compilers= arm950
group.gcc32arm.isSemVer=true
group.gcc32arm.objdumper=/opt/compiler-explorer/arm/gcc-9.5.0/arm-unknown-linux-gnueabihf/bin/arm-unknown-linux-gnueabihf-objdump
group.gcc32arm.instructionSet=arm32

compiler.arm950.exe=/opt/compiler-explorer/arm/gcc-9.5.0/arm-unknown-linux-gnueabihf/bin/arm-unknown-linux-gnueabihf-g++
compiler.arm950.semver=9.5.0

# 64 bit
group.gcc64arm.groupName=Arm 64-bit GCC
group.gcc64arm.compilers= arm64g950
group.gcc64arm.isSemVer=true
group.gcc64arm.objdumper=/opt/compiler-explorer/arm64/gcc-9.5.0/aarch64-unknown-linux-gnu/aarch64-unknown-linux-gnu/bin/objdump
group.gcc64arm.instructionSet=aarch64
group.gcc64arm.baseName=ARM64 gcc

compiler.arm64g950.exe=/opt/compiler-explorer/arm64/gcc-9.5.0/aarch64-unknown-linux-gnu/bin/aarch64-unknown-linux-gnu-g++
compiler.arm64g950.semver=9.5

#################################
#################################
# Installed tools
tools=clangformat1101:clangquery1101:clangtidy1101:ldd:llvm-cov1001:llvm-mca1001:readelf:nm:strings:llvmdwarfdump1001:clangquerydefault:clangtidydefault

tools.clangformat1101.exe=/opt/compiler-explorer/clang-11.0.1/bin/clang-format
tools.clangformat1101.name=clang-format
tools.clangformat1101.type=independent
tools.clangformat1101.class=clang-format-tool

tools.clangquery1101.exe=/opt/compiler-explorer/clang-11.0.1/bin/clang-query
tools.clangquery1101.name=clang-query (trunk)
tools.clangquery1101.type=independent
tools.clangquery1101.class=clang-query-tool
tools.clangquery1101.stdinHint=Query commands
tools.clangquery1101.monacoStdin=true

tools.clangtidy1101.exe=/opt/compiler-explorer/clang-11.0.1/bin/clang-tidy
tools.clangtidy1101.name=clang-tidy (trunk)
tools.clangtidy1101.type=independent
tools.clangtidy1101.class=clang-tidy-tool
tools.clangtidy1101.exclude=cl19:cl_new
tools.clangtidy1101.options=--gcc-toolchain=/opt/compiler-explorer/gcc-9.5.0
tools.clangtidy1101.stdinHint=disabled

tools.ldd.name=ldd
tools.ldd.exe=/usr/bin/ldd
tools.ldd.type=postcompilation
tools.ldd.class=readelf-tool
tools.ldd.exclude=djggp
tools.ldd.stdinHint=disabled

tools.llvm-cov1001.name=llvm-cov (trunk)
tools.llvm-cov1001.exe=/opt/compiler-explorer/clang-10.0.1/bin/llvm-cov
tools.llvm-cov1001.type=postcompilation
tools.llvm-cov1001.class=llvm-cov-tool

tools.llvm-mca1001.name=llvm-mca (trunk)
tools.llvm-mca1001.exe=/opt/compiler-explorer/clang-10.0.1/bin/llvm-mca
tools.llvm-mca1001.type=postcompilation
tools.llvm-mca1001.class=llvm-mca-tool
tools.llvm-mca1001.exclude=avr:rv32:arm:mips:msp:ppc:cl19:cl_new:djggp
tools.llvm-mca1001.stdinHint=disabled

tools.readelf.name=readelf (default)
tools.readelf.exe=/usr/bin/readelf
tools.readelf.type=postcompilation
tools.readelf.class=readelf-tool
tools.readelf.exclude=djggp
tools.readelf.stdinHint=disabled

tools.nm.name=nm (default)
tools.nm.exe=/usr/bin/nm
tools.nm.type=postcompilation
tools.nm.class=nm-tool
tools.nm.exclude=djggp
tools.nm.stdinHint=disabled

tools.strings.exe=/usr/bin/strings
tools.strings.name=strings
tools.strings.type=postcompilation
tools.strings.class=strings-tool
tools.strings.exclude=djggp
tools.strings.stdinHint=disabled

tools.llvmdwarfdump1001.exe=/opt/compiler-explorer/clang-10.0.1/bin/llvm-dwarfdump
tools.llvmdwarfdump1001.name=llvm-dwarfdump (trunk)
tools.llvmdwarfdump1001.type=postcompilation
tools.llvmdwarfdump1001.class=llvm-dwarfdump-tool
tools.llvmdwarfdump1001.stdinHint=disabled
# MSVC does not produce DWARF debug information.
tools.llvmdwarfdump1001.exclude=cl19:cl_new

tools.clangquerydefault.exe=/usr/bin/clang-query
tools.clangquerydefault.name=clang-query (default)
tools.clangquerydefault.type=independent
tools.clangquerydefault.class=clang-query-tool
tools.clangquerydefault.stdinHint=Query commands
tools.clangquerydefault.monacoStdin=true

tools.clangtidydefault.exe=/usr/bin/clang-tidy
tools.clangtidydefault.name=clang-tidy (default)
tools.clangtidydefault.type=independent
tools.clangtidydefault.class=clang-tidy-tool
tools.clangtidydefault.stdinHint=disabled

